{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.McsMedia = exports.Media = exports.McsClient = exports.Client = void 0;\n\nconst logger_1 = require(\"./logger\");\n\nconst configuration_1 = require(\"./configuration\");\n\nconst media_1 = require(\"./media\");\n\nObject.defineProperty(exports, \"Media\", {\n  enumerable: true,\n  get: function () {\n    return media_1.Media;\n  }\n});\nObject.defineProperty(exports, \"McsMedia\", {\n  enumerable: true,\n  get: function () {\n    return media_1.Media;\n  }\n});\n\nconst transport_1 = require(\"./services/transport\");\n\nconst network_1 = require(\"./services/network\");\n\nconst log = logger_1.Logger.scope(''); //log.setLevel('trace');\n\nconst SDK_VERSION = require('./../package.json').version;\n\nconst MSG_NO_TOKEN = 'A valid Twilio token should be provided';\n/**\n * @classdesc A Client provides an interface for Media Content Service\n */\n\nclass Client {\n  /**\n   * @param {String} token - Access token\n   * @param {String} baseUrl - Base URL for Media Content Service, i.e. /v1/Services/{serviceSid}/Media\n   * @param {Client#ClientOptions} [options] - Options to customize the Client\n   */\n  constructor(token, baseUrl, options = {}) {\n    this.options = options;\n    this.options.logLevel = this.options.logLevel || 'silent';\n    this.config = new configuration_1.Configuration(token, baseUrl, this.options);\n\n    if (!token) {\n      throw new Error(MSG_NO_TOKEN);\n    }\n\n    log.setLevel(this.options.logLevel);\n    this.options.transport = this.options.transport || new transport_1.Transport();\n    this.transport = this.options.transport;\n    this.network = new network_1.Network(this.config, this.transport);\n  }\n  /**\n   * These options can be passed to Client constructor\n   * @typedef {Object} Client#ClientOptions\n   * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n   *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n   */\n\n  /**\n   * Update the token used for Client operations\n   * @param {String} token - The JWT string of the new token\n   * @public\n   * @returns {void}\n   */\n\n\n  updateToken(token) {\n    log.info('updateToken');\n\n    if (!token) {\n      throw new Error(MSG_NO_TOKEN);\n    }\n\n    this.config.updateToken(token);\n  }\n  /**\n   * Gets media from media service\n   * @param {String} sid - Media's SID\n   * @public\n   * @returns {Promise<Media>}\n   */\n\n\n  async get(sid) {\n    let response = await this.network.get(`${this.config.baseUrl}/${sid}`);\n    return new media_1.Media(this.config, this.network, response.body);\n  }\n  /**\n   * Posts raw content to media service\n   * @param {String} contentType - content type of media\n   * @param {String|Buffer} media - content to post\n   * @public\n   * @returns {Promise<Media>}\n   */\n\n\n  async post(contentType, media) {\n    let response = await this.network.post(this.config.baseUrl, media, contentType);\n    return new media_1.Media(this.config, this.network, response.body);\n  }\n  /**\n   * Posts FormData to media service. Can be used only with browser engine's FormData.\n   * In non-browser FormData case the method will do promise reject with\n   * new TypeError(\"Posting FormData supported only with browser engine's FormData\")\n   * @param {FormData} formData - form data to post\n   * @public\n   * @returns {Promise<Media>}\n   */\n\n\n  async postFormData(formData) {\n    let response = await this.network.post(this.config.baseUrl, formData);\n    return new media_1.Media(this.config, this.network, response.body);\n  }\n\n}\n\nexports.Client = Client;\nexports.McsClient = Client;\nClient.version = SDK_VERSION;\nexports.default = Client;","map":{"version":3,"sources":["C:/Users/USER/Desktop/end-project-updated-main/react/node_modules/twilio-mcs-client/lib/client.js"],"names":["Object","defineProperty","exports","value","McsMedia","Media","McsClient","Client","logger_1","require","configuration_1","media_1","enumerable","get","transport_1","network_1","log","Logger","scope","SDK_VERSION","version","MSG_NO_TOKEN","constructor","token","baseUrl","options","logLevel","config","Configuration","Error","setLevel","transport","Transport","network","Network","updateToken","info","sid","response","body","post","contentType","media","postFormData","formData","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.McsMedia = exports.Media = exports.McsClient = exports.Client = void 0;\nconst logger_1 = require(\"./logger\");\nconst configuration_1 = require(\"./configuration\");\nconst media_1 = require(\"./media\");\nObject.defineProperty(exports, \"Media\", { enumerable: true, get: function () { return media_1.Media; } });\nObject.defineProperty(exports, \"McsMedia\", { enumerable: true, get: function () { return media_1.Media; } });\nconst transport_1 = require(\"./services/transport\");\nconst network_1 = require(\"./services/network\");\nconst log = logger_1.Logger.scope('');\n//log.setLevel('trace');\nconst SDK_VERSION = require('./../package.json').version;\nconst MSG_NO_TOKEN = 'A valid Twilio token should be provided';\n/**\n * @classdesc A Client provides an interface for Media Content Service\n */\nclass Client {\n    /**\n     * @param {String} token - Access token\n     * @param {String} baseUrl - Base URL for Media Content Service, i.e. /v1/Services/{serviceSid}/Media\n     * @param {Client#ClientOptions} [options] - Options to customize the Client\n     */\n    constructor(token, baseUrl, options = {}) {\n        this.options = options;\n        this.options.logLevel = this.options.logLevel || 'silent';\n        this.config = new configuration_1.Configuration(token, baseUrl, this.options);\n        if (!token) {\n            throw new Error(MSG_NO_TOKEN);\n        }\n        log.setLevel(this.options.logLevel);\n        this.options.transport = this.options.transport || new transport_1.Transport();\n        this.transport = this.options.transport;\n        this.network = new network_1.Network(this.config, this.transport);\n    }\n    /**\n     * These options can be passed to Client constructor\n     * @typedef {Object} Client#ClientOptions\n     * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n     *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n     */\n    /**\n     * Update the token used for Client operations\n     * @param {String} token - The JWT string of the new token\n     * @public\n     * @returns {void}\n     */\n    updateToken(token) {\n        log.info('updateToken');\n        if (!token) {\n            throw new Error(MSG_NO_TOKEN);\n        }\n        this.config.updateToken(token);\n    }\n    /**\n     * Gets media from media service\n     * @param {String} sid - Media's SID\n     * @public\n     * @returns {Promise<Media>}\n     */\n    async get(sid) {\n        let response = await this.network.get(`${this.config.baseUrl}/${sid}`);\n        return new media_1.Media(this.config, this.network, response.body);\n    }\n    /**\n     * Posts raw content to media service\n     * @param {String} contentType - content type of media\n     * @param {String|Buffer} media - content to post\n     * @public\n     * @returns {Promise<Media>}\n     */\n    async post(contentType, media) {\n        let response = await this.network.post(this.config.baseUrl, media, contentType);\n        return new media_1.Media(this.config, this.network, response.body);\n    }\n    /**\n     * Posts FormData to media service. Can be used only with browser engine's FormData.\n     * In non-browser FormData case the method will do promise reject with\n     * new TypeError(\"Posting FormData supported only with browser engine's FormData\")\n     * @param {FormData} formData - form data to post\n     * @public\n     * @returns {Promise<Media>}\n     */\n    async postFormData(formData) {\n        let response = await this.network.post(this.config.baseUrl, formData);\n        return new media_1.Media(this.config, this.network, response.body);\n    }\n}\nexports.Client = Client;\nexports.McsClient = Client;\nClient.version = SDK_VERSION;\nexports.default = Client;\n"]},"metadata":{},"sourceType":"script"}