{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\end-project-updated-main\\\\react\\\\src\\\\views\\\\Chat\\\\ChatScreen.js\";\nimport React from \"react\";\nimport { AppBar, Backdrop, CircularProgress, Container, CssBaseline, Grid, IconButton, List, TextField, Toolbar, Typography } from \"@material-ui/core\";\nimport { Send } from \"@material-ui/icons\";\nimport axios from \"axios\";\nimport ChatItem from \"./ChatItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = require(\"twilio-chat\");\n\nclass ChatScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      const {\n        location\n      } = this.props;\n      const {\n        state\n      } = location || {};\n      const {\n        email,\n        room\n      } = state || {};\n      let token = \"\";\n\n      if (!email || !room) {\n        this.props.history.replace(\"/\");\n      }\n\n      this.setState({\n        loading: true\n      });\n\n      try {\n        token = await this.getToken(email);\n      } catch {\n        throw new Error(\"Unable to get token, please reload this page\");\n      }\n\n      const client = await Chat.Client.create(token);\n      client.on(\"tokenAboutToExpire\", async () => {\n        const token = await this.getToken(email);\n        client.updateToken(token);\n      });\n      client.on(\"tokenExpired\", async () => {\n        const token = await this.getToken(email);\n        client.updateToken(token);\n      });\n      client.on(\"channelJoined\", async channel => {\n        // getting list of all messages since this is an existing channel\n        const messages = await channel.getMessages();\n        this.setState({\n          messages: messages.items || []\n        });\n        this.scrollToBottom();\n      });\n\n      try {\n        const channel = await client.getChannelByUniqueName(room);\n        this.joinChannel(channel);\n      } catch (err) {\n        try {\n          const channel = await client.createChannel({\n            uniqueName: room,\n            friendlyName: room\n          });\n          this.joinChannel(channel);\n        } catch {\n          throw new Error(\"Unable to create channel, please reload this page\");\n        }\n      }\n    };\n\n    this.sendMessage = () => {\n      const {\n        text,\n        channel\n      } = this.state;\n\n      if (text) {\n        this.setState({\n          loading: true\n        });\n        channel.sendMessage(String(text).trim());\n        this.setState({\n          text: \"\",\n          loading: false\n        });\n      }\n    };\n\n    this.getToken = async email => {\n      const response = await axios.get(`http://localhost:5000/token/${email}`);\n      const {\n        data\n      } = response;\n      return data.token;\n    };\n\n    this.joinChannel = async channel => {\n      if (channel.channelState.status !== \"joined\") {\n        await channel.join();\n      }\n\n      this.setState({\n        channel: channel,\n        loading: false\n      });\n      channel.on(\"messageAdded\", this.handleMessageAdded);\n      this.scrollToBottom();\n    };\n\n    this.handleMessageAdded = message => {\n      const {\n        messages\n      } = this.state;\n      this.setState({\n        messages: [...messages, message]\n      }, this.scrollToBottom);\n    };\n\n    this.scrollToBottom = () => {\n      const scrollHeight = this.scrollDiv.current.scrollHeight;\n      const height = this.scrollDiv.current.clientHeight;\n      const maxScrollTop = scrollHeight - height;\n      this.scrollDiv.current.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\n    };\n\n    this.state = {\n      text: \"\",\n      messages: [],\n      loading: false,\n      channel: null\n    };\n    this.scrollDiv = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    const {\n      loading,\n      text,\n      messages,\n      channel\n    } = this.state;\n    const {\n      location\n    } = this.props;\n    const {\n      state\n    } = location || {};\n    const {\n      email,\n      room\n    } = state || {};\n    return /*#__PURE__*/_jsxDEV(Container, {\n      component: \"main\",\n      maxWidth: \"md\",\n      children: [/*#__PURE__*/_jsxDEV(Backdrop, {\n        open: loading,\n        style: {\n          zIndex: 99999\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n          style: {\n            color: \"white\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AppBar, {\n        elevation: 10,\n        children: /*#__PURE__*/_jsxDEV(Toolbar, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: `Room: ${room}, User: ${email}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        style: styles.mainGrid,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          style: styles.gridItemChatList,\n          ref: this.scrollDiv,\n          children: /*#__PURE__*/_jsxDEV(List, {\n            dense: true,\n            children: messages && messages.map(message => /*#__PURE__*/_jsxDEV(ChatItem, {\n              message: message,\n              email: email\n            }, message.index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          style: styles.gridItemMessage,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justify: \"center\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              style: styles.textFieldContainer,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                style: styles.textField,\n                placeholder: \"Enter message\",\n                variant: \"outlined\",\n                multiline: true,\n                rows: 2,\n                value: text,\n                disabled: !channel,\n                onChange: event => this.setState({\n                  text: event.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                style: styles.sendButton,\n                onClick: this.sendMessage,\n                disabled: !channel,\n                children: /*#__PURE__*/_jsxDEV(Send, {\n                  style: styles.sendIcon\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst styles = {\n  textField: {\n    width: \"100%\",\n    borderWidth: 0,\n    borderColor: \"transparent\"\n  },\n  textFieldContainer: {\n    flex: 1,\n    marginRight: 12\n  },\n  gridItem: {\n    paddingTop: 12,\n    paddingBottom: 12\n  },\n  gridItemChatList: {\n    overflow: \"auto\",\n    height: \"70vh\"\n  },\n  gridItemMessage: {\n    marginTop: 12,\n    marginBottom: 12\n  },\n  sendButton: {\n    backgroundColor: \"#3f51b5\"\n  },\n  sendIcon: {\n    color: \"white\"\n  },\n  mainGrid: {\n    paddingTop: 100,\n    borderWidth: 1\n  }\n};\nexport default ChatScreen;","map":{"version":3,"sources":["C:/Users/USER/Desktop/end-project-updated-main/react/src/views/Chat/ChatScreen.js"],"names":["React","AppBar","Backdrop","CircularProgress","Container","CssBaseline","Grid","IconButton","List","TextField","Toolbar","Typography","Send","axios","ChatItem","Chat","require","ChatScreen","Component","constructor","props","componentDidMount","location","state","email","room","token","history","replace","setState","loading","getToken","Error","client","Client","create","on","updateToken","channel","messages","getMessages","items","scrollToBottom","getChannelByUniqueName","joinChannel","err","createChannel","uniqueName","friendlyName","sendMessage","text","String","trim","response","get","data","channelState","status","join","handleMessageAdded","message","scrollHeight","scrollDiv","current","height","clientHeight","maxScrollTop","scrollTop","createRef","render","zIndex","color","styles","mainGrid","gridItemChatList","map","index","gridItemMessage","textFieldContainer","textField","event","target","value","sendButton","sendIcon","width","borderWidth","borderColor","flex","marginRight","gridItem","paddingTop","paddingBottom","overflow","marginTop","marginBottom","backgroundColor"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n    AppBar,\r\n    Backdrop,\r\n    CircularProgress,\r\n    Container,\r\n    CssBaseline,\r\n    Grid,\r\n    IconButton,\r\n    List,\r\n    TextField,\r\n    Toolbar,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { Send } from \"@material-ui/icons\";\r\nimport axios from \"axios\";\r\nimport ChatItem from \"./ChatItem\";\r\nconst Chat = require(\"twilio-chat\");\r\nclass ChatScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            text: \"\",\r\n            messages: [],\r\n            loading: false,\r\n            channel: null,\r\n        };\r\n        this.scrollDiv = React.createRef();\r\n    }\r\n    componentDidMount = async () => {\r\n        const { location } = this.props;\r\n        const { state } = location || {};\r\n        const { email, room } = state || {};\r\n        let token = \"\";\r\n\r\n        if (!email || !room) {\r\n            this.props.history.replace(\"/\");\r\n        }\r\n\r\n        this.setState({ loading: true });\r\n\r\n        try {\r\n            token = await this.getToken(email);\r\n        } catch {\r\n            throw new Error(\"Unable to get token, please reload this page\");\r\n        }\r\n        const client = await Chat.Client.create(token);\r\n        client.on(\"tokenAboutToExpire\", async () => {\r\n            const token = await this.getToken(email);\r\n            client.updateToken(token);\r\n        });\r\n        client.on(\"tokenExpired\", async () => {\r\n            const token = await this.getToken(email);\r\n            client.updateToken(token);\r\n        });\r\n        client.on(\"channelJoined\", async (channel) => {\r\n            // getting list of all messages since this is an existing channel\r\n            const messages = await channel.getMessages();\r\n            this.setState({ messages: messages.items || [] });\r\n            this.scrollToBottom();\r\n        });\r\n        try {\r\n            const channel = await client.getChannelByUniqueName(room);\r\n            this.joinChannel(channel);\r\n        } catch (err) {\r\n            try {\r\n                const channel = await client.createChannel({\r\n                    uniqueName: room,\r\n                    friendlyName: room,\r\n                });\r\n\r\n                this.joinChannel(channel);\r\n            } catch {\r\n                throw new Error(\"Unable to create channel, please reload this page\");\r\n            }\r\n        }\r\n    }\r\n    sendMessage = () => {\r\n        const { text, channel } = this.state;\r\n        if (text) {\r\n            this.setState({ loading: true });\r\n            channel.sendMessage(String(text).trim());\r\n            this.setState({ text: \"\", loading: false });\r\n        }\r\n    };\r\n\r\n    getToken = async (email) => {\r\n        const response = await axios.get(`http://localhost:5000/token/${email}`);\r\n        const { data } = response;\r\n        return data.token;\r\n    }\r\n\r\n    joinChannel = async (channel) => {\r\n        if (channel.channelState.status !== \"joined\") {\r\n            await channel.join();\r\n        }\r\n        this.setState({\r\n            channel: channel,\r\n            loading: false\r\n        });\r\n        channel.on(\"messageAdded\", this.handleMessageAdded);\r\n        this.scrollToBottom();\r\n    };\r\n\r\n\r\n    handleMessageAdded = (message) => {\r\n        const { messages } = this.state;\r\n        this.setState({\r\n            messages: [...messages, message],\r\n        },\r\n            this.scrollToBottom\r\n        );\r\n    };\r\n\r\n    scrollToBottom = () => {\r\n        const scrollHeight = this.scrollDiv.current.scrollHeight;\r\n        const height = this.scrollDiv.current.clientHeight;\r\n        const maxScrollTop = scrollHeight - height;\r\n        this.scrollDiv.current.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\r\n    };\r\n    render() {\r\n        const { loading, text, messages, channel } = this.state;\r\n        const { location } = this.props;\r\n        const { state } = location || {};\r\n        const { email, room } = state || {};\r\n\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"md\">\r\n                <Backdrop open={loading} style={{ zIndex: 99999 }}>\r\n                    <CircularProgress style={{ color: \"white\" }} />\r\n                </Backdrop>\r\n\r\n                <AppBar elevation={10}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\">\r\n                            {`Room: ${room}, User: ${email}`}\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                <CssBaseline />\r\n\r\n                <Grid container direction=\"column\" style={styles.mainGrid}>\r\n                    <Grid item style={styles.gridItemChatList} ref={this.scrollDiv}>\r\n                        <List dense={true}>\r\n                            {messages &&\r\n                                messages.map((message) =>\r\n                                    <ChatItem\r\n                                        key={message.index}\r\n                                        message={message}\r\n                                        email={email} />\r\n                                )}\r\n                        </List>\r\n                    </Grid>\r\n\r\n                    <Grid item style={styles.gridItemMessage}>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"center\"\r\n                            alignItems=\"center\">\r\n                            <Grid item style={styles.textFieldContainer}>\r\n                                <TextField\r\n                                    required\r\n                                    style={styles.textField}\r\n                                    placeholder=\"Enter message\"\r\n                                    variant=\"outlined\"\r\n                                    multiline\r\n                                    rows={2}\r\n                                    value={text}\r\n                                    disabled={!channel}\r\n                                    onChange={(event) =>\r\n                                        this.setState({ text: event.target.value })\r\n                                    } />\r\n                            </Grid>\r\n\r\n                            <Grid item>\r\n                                <IconButton\r\n                                    style={styles.sendButton}\r\n                                    onClick={this.sendMessage}\r\n                                    disabled={!channel}>\r\n                                    <Send style={styles.sendIcon} />\r\n                                </IconButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n}\r\nconst styles = {\r\n    textField: { width: \"100%\", borderWidth: 0, borderColor: \"transparent\" },\r\n    textFieldContainer: { flex: 1, marginRight: 12 },\r\n    gridItem: { paddingTop: 12, paddingBottom: 12 },\r\n    gridItemChatList: { overflow: \"auto\", height: \"70vh\" },\r\n    gridItemMessage: { marginTop: 12, marginBottom: 12 },\r\n    sendButton: { backgroundColor: \"#3f51b5\" },\r\n    sendIcon: { color: \"white\" },\r\n    mainGrid: { paddingTop: 100, borderWidth: 1 },\r\n};\r\nexport default ChatScreen;\r\n"]},"metadata":{},"sourceType":"module"}