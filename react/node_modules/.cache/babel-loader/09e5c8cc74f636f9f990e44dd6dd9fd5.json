{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transport = void 0;\n\nconst transporterror_1 = require(\"./transporterror\");\n\nconst XHR = global['XMLHttpRequest'] || require('xmlhttprequest').XMLHttpRequest;\n\nfunction parseResponseHeaders(headerString) {\n  if (!headerString) {\n    return {};\n  }\n\n  return headerString.split('\\u000d\\u000a').map(el => el.split('\\u003a\\u0020')).filter(el => el.length === 2 && el[1].length > 0).reduce((prev, curr) => {\n    prev[curr[0]] = curr[1];\n    return prev;\n  }, {});\n}\n\nfunction extractBody(xhr) {\n  const contentType = xhr.getResponseHeader('Content-Type');\n\n  if (!contentType || contentType.indexOf('application/json') !== 0 || xhr.responseText.length === 0) {\n    return xhr.responseText;\n  }\n\n  try {\n    return JSON.parse(xhr.responseText);\n  } catch (e) {\n    return xhr.responseText;\n  }\n}\n\nfunction adaptHttpResponse(response) {\n  try {\n    response.body = JSON.parse(response.body);\n  } catch (e) {} // eslint-disable-line no-empty\n\n\n  return response;\n}\n/**\n * Provides generic network interface\n */\n\n\nclass Transport {\n  constructor() {}\n\n  static request(method, url, headers, body) {\n    return new Promise((resolve, reject) => {\n      let xhr = new XHR();\n      xhr.open(method, url, true);\n\n      xhr.onreadystatechange = function onreadystatechange() {\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        const headers = parseResponseHeaders(xhr.getAllResponseHeaders());\n        const body = extractBody(xhr);\n\n        if (200 <= xhr.status && xhr.status < 300) {\n          resolve({\n            status: xhr.status,\n            headers,\n            body\n          });\n        } else {\n          const status = xhr.statusText && xhr.statusText.code ? xhr.statusText.code : 'NONE';\n          let bodyRepresentation;\n\n          if (typeof body === 'string') {\n            bodyRepresentation = body && body.split('\\n', 2).length === 1 ? body : '';\n          } else {\n            bodyRepresentation = JSON.stringify(body);\n          }\n\n          const message = `${xhr.status}: [${status}] ${bodyRepresentation}`;\n          reject(new transporterror_1.TransportError(message, xhr.status, body, status, headers));\n        }\n      };\n\n      for (let headerName in headers) {\n        xhr.setRequestHeader(headerName, headers[headerName]);\n\n        if (headerName === 'Content-Type' && headers[headerName] === 'application/json') {\n          body = JSON.stringify(body);\n        }\n      }\n\n      xhr.send(body);\n    });\n  }\n  /**\n   * Make a GET request by given URL\n   */\n\n\n  get(url, headers) {\n    return Transport.request('GET', url, headers);\n  }\n  /**\n   * Make a POST request by given URL\n   */\n\n\n  post(url, headers, body) {\n    return Transport.request('POST', url, headers, body);\n  }\n\n}\n\nexports.Transport = Transport;","map":{"version":3,"sources":["C:/Users/USER/Desktop/end-project-updated-main/react/node_modules/twilio-mcs-client/lib/services/transport.js"],"names":["Object","defineProperty","exports","value","Transport","transporterror_1","require","XHR","global","XMLHttpRequest","parseResponseHeaders","headerString","split","map","el","filter","length","reduce","prev","curr","extractBody","xhr","contentType","getResponseHeader","indexOf","responseText","JSON","parse","e","adaptHttpResponse","response","body","constructor","request","method","url","headers","Promise","resolve","reject","open","onreadystatechange","readyState","getAllResponseHeaders","status","statusText","code","bodyRepresentation","stringify","message","TransportError","headerName","setRequestHeader","send","get","post"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transport = void 0;\nconst transporterror_1 = require(\"./transporterror\");\nconst XHR = global['XMLHttpRequest'] || require('xmlhttprequest').XMLHttpRequest;\nfunction parseResponseHeaders(headerString) {\n    if (!headerString) {\n        return {};\n    }\n    return headerString\n        .split('\\u000d\\u000a')\n        .map(el => el.split('\\u003a\\u0020'))\n        .filter(el => el.length === 2 && el[1].length > 0)\n        .reduce((prev, curr) => {\n        prev[curr[0]] = curr[1];\n        return prev;\n    }, {});\n}\nfunction extractBody(xhr) {\n    const contentType = xhr.getResponseHeader('Content-Type');\n    if (!contentType || contentType.indexOf('application/json') !== 0 || xhr.responseText.length === 0) {\n        return xhr.responseText;\n    }\n    try {\n        return JSON.parse(xhr.responseText);\n    }\n    catch (e) {\n        return xhr.responseText;\n    }\n}\nfunction adaptHttpResponse(response) {\n    try {\n        response.body = JSON.parse(response.body);\n    }\n    catch (e) {\n    } // eslint-disable-line no-empty\n    return response;\n}\n/**\n * Provides generic network interface\n */\nclass Transport {\n    constructor() {\n    }\n    static request(method, url, headers, body) {\n        return new Promise((resolve, reject) => {\n            let xhr = new XHR();\n            xhr.open(method, url, true);\n            xhr.onreadystatechange = function onreadystatechange() {\n                if (xhr.readyState !== 4) {\n                    return;\n                }\n                const headers = parseResponseHeaders(xhr.getAllResponseHeaders());\n                const body = extractBody(xhr);\n                if (200 <= xhr.status && xhr.status < 300) {\n                    resolve({ status: xhr.status, headers, body });\n                }\n                else {\n                    const status = xhr.statusText && xhr.statusText.code ? xhr.statusText.code : 'NONE';\n                    let bodyRepresentation;\n                    if (typeof body === 'string') {\n                        bodyRepresentation = body && body.split('\\n', 2).length === 1\n                            ? body\n                            : '';\n                    }\n                    else {\n                        bodyRepresentation = JSON.stringify(body);\n                    }\n                    const message = `${xhr.status}: [${status}] ${bodyRepresentation}`;\n                    reject(new transporterror_1.TransportError(message, xhr.status, body, status, headers));\n                }\n            };\n            for (let headerName in headers) {\n                xhr.setRequestHeader(headerName, headers[headerName]);\n                if (headerName === 'Content-Type' && headers[headerName] === 'application/json') {\n                    body = JSON.stringify(body);\n                }\n            }\n            xhr.send(body);\n        });\n    }\n    /**\n     * Make a GET request by given URL\n     */\n    get(url, headers) {\n        return Transport.request('GET', url, headers);\n    }\n    /**\n     * Make a POST request by given URL\n     */\n    post(url, headers, body) {\n        return Transport.request('POST', url, headers, body);\n    }\n}\nexports.Transport = Transport;\n"]},"metadata":{},"sourceType":"script"}